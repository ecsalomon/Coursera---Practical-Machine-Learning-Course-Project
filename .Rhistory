testing <- dataReduce[-trainIndex,]
testIndex <- createDataPartition(testing$classe, p = 0.50,
list = FALSE)
validation <- testing[-testIndex,]
testing <- testing[testIndex,]
keepCols <- selectWeka(train = training, evaluator="CfsSubsetEval",
search = "BestFirst")
set.seed(10)
modFitCFS <- train(classe ~ ., trControl = trainSettings,
method = "rf", data = training[, c(keepCols, 53)])
modFitCFS$finalModel
predictionsCFS <- predict(modFitCFS$finalModel, newdata = validation)
saveRDS(modFitCFS, file="modFitCFS.rds")
table(predictionsCFS, validation$classe)
set.seed(11)
trainIndex <- createDataPartition(dataReduce$classe, p = 0.50, list = FALSE)
training <- dataReduce[trainIndex,]
set.seed(11)
testing <- dataReduce[-trainIndex,]
testIndex <- createDataPartition(testing$classe, p = 0.50,
list = FALSE)
validation <- testing[-testIndex,]
testing <- testing[testIndex,]
keepCols <- selectWeka(train = training, evaluator="CfsSubsetEval",
search = "BestFirst")
set.seed(11)
modFitCFS <- train(classe ~ ., trControl = trainSettings,
method = "rf", data = training[, c(keepCols, 53)])
modFitCFS$finalModel
predictionsCFS <- predict(modFitCFS$finalModel, newdata = validation)
saveRDS(modFitCFS, file="modFitCFS.rds")
table(predictionsCFS, validation$classe)
set.seed(12)
trainIndex <- createDataPartition(dataReduce$classe, p = 0.50, list = FALSE)
training <- dataReduce[trainIndex,]
set.seed(12)
testing <- dataReduce[-trainIndex,]
testIndex <- createDataPartition(testing$classe, p = 0.50,
list = FALSE)
validation <- testing[-testIndex,]
testing <- testing[testIndex,]
keepCols <- selectWeka(train = training, evaluator="CfsSubsetEval",
search = "BestFirst")
set.seed(12)
modFitCFS <- train(classe ~ ., trControl = trainSettings,
method = "rf", data = training[, c(keepCols, 53)])
modFitCFS$finalModel
predictionsCFS <- predict(modFitCFS$finalModel, newdata = validation)
saveRDS(modFitCFS, file="modFitCFS.rds")
table(predictionsCFS, validation$classe)
set.seed(13)
trainIndex <- createDataPartition(dataReduce$classe, p = 0.50, list = FALSE)
training <- dataReduce[trainIndex,]
set.seed(13)
testing <- dataReduce[-trainIndex,]
testIndex <- createDataPartition(testing$classe, p = 0.50,
list = FALSE)
validation <- testing[-testIndex,]
testing <- testing[testIndex,]
keepCols <- selectWeka(train = training, evaluator="CfsSubsetEval",
search = "BestFirst")
set.seed(13)
modFitCFS <- train(classe ~ ., trControl = trainSettings,
method = "rf", data = training[, c(keepCols, 53)])
modFitCFS$finalModel
predictionsCFS <- predict(modFitCFS$finalModel, newdata = validation)
saveRDS(modFitCFS, file="modFitCFS.rds")
table(predictionsCFS, validation$classe)
set.seed(14)
trainIndex <- createDataPartition(dataReduce$classe, p = 0.50, list = FALSE)
training <- dataReduce[trainIndex,]
set.seed(14)
testing <- dataReduce[-trainIndex,]
testIndex <- createDataPartition(testing$classe, p = 0.50,
list = FALSE)
validation <- testing[-testIndex,]
testing <- testing[testIndex,]
keepCols <- selectWeka(train = training, evaluator="CfsSubsetEval",
search = "BestFirst")
set.seed(14)
modFitCFS <- train(classe ~ ., trControl = trainSettings,
method = "rf", data = training[, c(keepCols, 53)])
modFitCFS$finalModel
predictionsCFS <- predict(modFitCFS$finalModel, newdata = validation)
saveRDS(modFitCFS, file="modFitCFS.rds")
table(predictionsCFS, validation$classe)
set.seed(15)
trainIndex <- createDataPartition(dataReduce$classe, p = 0.50, list = FALSE)
training <- dataReduce[trainIndex,]
set.seed(15)
testing <- dataReduce[-trainIndex,]
testIndex <- createDataPartition(testing$classe, p = 0.50,
list = FALSE)
validation <- testing[-testIndex,]
testing <- testing[testIndex,]
keepCols <- selectWeka(train = training, evaluator="CfsSubsetEval",
search = "BestFirst")
set.seed(15)
modFitCFS <- train(classe ~ ., trControl = trainSettings,
method = "rf", data = training[, c(keepCols, 53)])
modFitCFS$finalModel
predictionsCFS <- predict(modFitCFS$finalModel, newdata = validation)
saveRDS(modFitCFS, file="modFitCFS.rds")
table(predictionsCFS, validation$classe)
set.seed(16)
trainIndex <- createDataPartition(dataReduce$classe, p = 0.50, list = FALSE)
training <- dataReduce[trainIndex,]
set.seed(16)
testing <- dataReduce[-trainIndex,]
testIndex <- createDataPartition(testing$classe, p = 0.50,
list = FALSE)
validation <- testing[-testIndex,]
testing <- testing[testIndex,]
keepCols <- selectWeka(train = training, evaluator="CfsSubsetEval",
search = "BestFirst")
set.seed(16)
modFitCFS <- train(classe ~ ., trControl = trainSettings,
method = "rf", data = training[, c(keepCols, 53)])
modFitCFS$finalModel
predictionsCFS <- predict(modFitCFS$finalModel, newdata = validation)
saveRDS(modFitCFS, file="modFitCFS.rds")
table(predictionsCFS, validation$classe)
set.seed(17)
trainIndex <- createDataPartition(dataReduce$classe, p = 0.50, list = FALSE)
training <- dataReduce[trainIndex,]
set.seed(17)
testing <- dataReduce[-trainIndex,]
testIndex <- createDataPartition(testing$classe, p = 0.50,
list = FALSE)
validation <- testing[-testIndex,]
testing <- testing[testIndex,]
keepCols <- selectWeka(train = training, evaluator="CfsSubsetEval",
search = "BestFirst")
set.seed(17)
modFitCFS <- train(classe ~ ., trControl = trainSettings,
method = "rf", data = training[, c(keepCols, 53)])
modFitCFS$finalModel
predictionsCFS <- predict(modFitCFS$finalModel, newdata = validation)
saveRDS(modFitCFS, file="modFitCFS.rds")
table(predictionsCFS, validation$classe)
set.seed(18)
trainIndex <- createDataPartition(dataReduce$classe, p = 0.50, list = FALSE)
training <- dataReduce[trainIndex,]
set.seed(18)
testing <- dataReduce[-trainIndex,]
testIndex <- createDataPartition(testing$classe, p = 0.50,
list = FALSE)
validation <- testing[-testIndex,]
testing <- testing[testIndex,]
keepCols <- selectWeka(train = training, evaluator="CfsSubsetEval",
search = "BestFirst")
set.seed(18)
modFitCFS <- train(classe ~ ., trControl = trainSettings,
method = "rf", data = training[, c(keepCols, 53)])
modFitCFS$finalModel
predictionsCFS <- predict(modFitCFS$finalModel, newdata = validation)
saveRDS(modFitCFS, file="modFitCFS.rds")
table(predictionsCFS, validation$classe)
set.seed(19)
trainIndex <- createDataPartition(dataReduce$classe, p = 0.50, list = FALSE)
training <- dataReduce[trainIndex,]
set.seed(19)
testing <- dataReduce[-trainIndex,]
testIndex <- createDataPartition(testing$classe, p = 0.50,
list = FALSE)
validation <- testing[-testIndex,]
testing <- testing[testIndex,]
keepCols <- selectWeka(train = training, evaluator="CfsSubsetEval",
search = "BestFirst")
set.seed(19)
modFitCFS <- train(classe ~ ., trControl = trainSettings,
method = "rf", data = training[, c(keepCols, 53)])
modFitCFS$finalModel
predictionsCFS <- predict(modFitCFS$finalModel, newdata = validation)
saveRDS(modFitCFS, file="modFitCFS.rds")
table(predictionsCFS, validation$classe)
library(devtools)
install_github("kevinushey/rex")
install.packages("devtools")
library(devtools)
install_github("kevinushey/rex")
View(data)
set.seed(3)
rnorm(6)
dataReduce <- data[, c(2, 8:11, 37:49, 60:68, 84:86, 102, 113:124, 140, 151:160)]
View(dataReduce)
factor(dataReduce$user_name, levels = "trainAssign")
factor(dataReduce$user_name, labels = "trainAssign")
set.seed(3)
trainAssign <- rnorm(6)
factor(dataReduce$user_name, levels = trainAssign)
factor(dataReduce$user_name, labels = trainAssign)
set.seed(1)
trainAssign <- rnorm(6)
factor(dataReduce$user_name, labels = trainAssign)
?levels
levels(dataReduce$user_name)
labels(dataReduce$user_name)
labels(dataReduce$user_name) <- trainAssign
library(plyr)
?revalue
levels(dataReduce$username)
levels(dataReduce$user_name)
names(trainAssign) <- with(dataReduce, levels(user_name))
trainAssign
revalue(dataReduce$user_name, replace = trainAssign)
dataReduce$user_name <- revalue(dataReduce$user_name, replace = trainAssign)
View(dataReduce)
training <- dataReduce[as.numeric(user_name < 0),]
training <- dataReduce[with(dataReduce, as.numeric(user_name)) < 0,]
training <- dataReduce[as.numeric(dataReduce$user_name) < 0,]
as.numeric(dataReduce$user_name)
training <- dataReduce[as.numeric(levels(dataReduce$user_name)) < 0,]
training <- dataReduce[with(dataReduce, as.numeric(levels($user_name))) < 0,]
training <- dataReduce[with(dataReduce, as.numeric(levels(user_name))) < 0,]
dataReduce <- dataReduce[with(dataReduce, as.numeric(levels(user_name))) >= 0,]
levels(dataReduce$user_name)
sum(is.na(data$user_name))
set.seed(2)
testAssign <- rnorm(3)
dataReduce$user_name <- with(dataReduce, factor(user_name))
View(dataReduce)
levels(dataReduce$user_name)
table(dataReduce$user_name)
table(training$user_name)
with(dataReduce, as.numeric(levels(user_name)))
labels(dataReduce$user_name)
trainIndex <- trainAssign[ < 2]
trainIndex <- trainAssign[trainAssign < 0]
training <- dataReduce[dataReduce$user_name %in% trainIndex,]
table(training$user_name)
dataReduce <- dataReduce[!(dataReduce$user_name %in% trainIndex),]
table(dataReduce$user_name)
dataReduce$user_name <- with(dataReduce, factor(user_name))
table(dataReduce$user_name)
names(trainAssign) <- with(dataReduce, levels(user_name))
names(testAssign) <- with(dataReduce, levels(user_name))
table(dataReduce$user_name)
testAssign
dataReduce$user_name <- revalue(dataReduce$user_name, replace = testAssign)
table(dataReduce$user_name)
set.seed(2)
testAssign <- rnorm(3)
testIndex <- testAssign[trainAssign < 0]
dataReduce$user_name <- with(dataReduce, factor(user_name))
names(testAssign) <- with(dataReduce, levels(user_name))
dataReduce$user_name <- revalue(dataReduce$user_name, replace = testAssign)
testing <- dataReduce[dataReduce$user_name %in% testIndex,]
validation <- dataReduce[!(dataReduce$user_name %in% testIndex),]
sum(c(length(testing), length(validation), length(training)))
sum(c(nrows(testing), nrows(validation), nrows(training)))
sum(c(n.rows(testing), n.rows(validation), n.rows(training)))
sum(c(nrow(testing), nrow(validation), nrow(training)))
dataReduce <- data[, c(2, 8:11, 37:49, 60:68, 84:86, 102, 113:124, 140, 151:160)]
set.seed(1)
trainAssign <- rnorm(6)
trainIndex <- trainAssign[trainAssign < 0]
names(trainAssign) <- with(dataReduce, levels(user_name))
dataReduce$user_name <- revalue(dataReduce$user_name, replace = trainAssign)
training <- dataReduce[dataReduce$user_name %in% trainIndex,]
dataReduce <- dataReduce[!(dataReduce$user_name %in% trainIndex),]
set.seed(2)
testAssign <- rnorm(3)
testIndex <- testAssign[trainAssign < 0]
dataReduce$user_name <- with(dataReduce, factor(user_name))
names(testAssign) <- with(dataReduce, levels(user_name))
dataReduce$user_name <- revalue(dataReduce$user_name, replace = testAssign)
testing <- dataReduce[dataReduce$user_name %in% testIndex,]
validation <- dataReduce[!(dataReduce$user_name %in% testIndex),]
sum(c(nrow(testing), nrow(validation), nrow(training)))
sys.time()
Sys.time()
diag(predictions52)
predictions52
?sum
performance52 <- table(predictions52, validation$classe)
errors52 <- performance52
diag(errors52) <- NA
OOSerror52 <- sum(sum(errors52)) / nrow(training)
predictions52 <- predict(modFit52$finalModel, newdata = validation)
performance52 <- table(predictions52, validation$classe)
errors52 <- performance52
diag(errors52) <- NA
OOSerror52 <- sum(sum(errors52)) / nrow(validation)
OOSerror52
diag(errors52)
errors52
sum(errors52)
OOSerror52 <- sum(sum(errors52, na.rm = TRUE)) / nrow(validation)
OOSerror52
start52 <- Sys.time()
set.seed(3)
modFit52 <- train(classe ~ ., method = "rf", data = training[, -1],
trControl = trainSettings)
end52 <- start52 <- Sys.time()
time52 <- end52 - start52
modFit52$finalModel
predictions52 <- predict(modFit52$finalModel, newdata = validation)
performance52 <- table(predictions52, validation$classe)
errors52 <- performance52
diag(errors52) <- NA
OOSerror52 <- sum(sum(errors52, na.rm = TRUE)) / nrow(validation)
print(paste("Time elapsed:", time52))
print("Out of sample performance:")
print(performance52)
print("Out of sample error estimate:", OOSerror52)
start52
end52
OOSerror52
pca <- preProcess(training[, 2:53], method = "pca", thresh = .5)
trainingPCA <- predict(pca, training[, 2:53])
trainingPCA$classe <- training$classe
startPCA <- Sys.time()
set.seed(4)
modFitPCA <- train(classe ~ ., method = "rf", data = trainingPCA,
trControl = trainSettings)
endPCA <- Sys.time()
timePCA <- endPCA - startPCA
modFitPCA$finalModel
validationPCA <- predict(pca, validation[, 2:53])
predictionsPCA <- predict(modFitPCA$finalModel, newdata = validationPCA)
performancePCA <- table(predictionsPCA, validation$classe)
errorsPCA <- performancePCA
diag(errorsPCA) <- NA
OOSerrorPCA <- sum(sum(errorsPCA, na.rm = TRUE)) / nrow(validation)
print(paste("Time elapsed:", timePCA))
print("Out of sample performance:")
print(performancePCA)
print(paste("Out of sample error estimate:", OOSerrorPCA))
table(training$classe)
table(validation$classe)
removeCols <- findCorrelation(cor(training[, -c(1, 54)]), cutoff = .6,
verbose = FALSE)
findCorrelation(cor(training[, -c(1, 54)]), cutoff = .6)
removeCols <- findCorrelation(cor(training[, -c(1, 54)]), cutoff = .6,
verbose = FALSE) + 1
removeCols
predictionsCor <- predict(modFitPCA$finalModel, newdata = validation)
performanceCor <- table(predictionsCor, validation$classe)
errorsCor <- performanceCor
diag(errorsCor) <- NA
OOSerrorCor <- sum(sum(errorsCor, na.rm = TRUE)) / nrow(validation)
print(paste("Time elapsed:", timeCor))
print(performanceCor)
print(paste("Out of sample error estimate:", OOSerrorCor))
removeCols <- findCorrelation(cor(training[, -c(1, 54)]), cutoff = .6,
verbose = FALSE) + 1
startCor <- Sys.time()
set.seed(5)
modFitCor <- train(classe ~ ., trControl = trainSettings,
method = "rf", data = training[, -c(1, removeCols)])
endCor <- Sys.time()
timeCor <- endCor - startCor
modFitCor$finalModel
predictionsCor <- predict(modFitPCA$finalModel, newdata = validation)
performanceCor <- table(predictionsCor, validation$classe)
errorsCor <- performanceCor
diag(errorsCor) <- NA
OOSerrorCor <- sum(sum(errorsCor, na.rm = TRUE)) / nrow(validation)
print(paste("Time elapsed:", timeCor))
print(performanceCor)
print(paste("Out of sample error estimate:", OOSerrorCor))
predictionsCor <- predict(modFitCor$finalModel, newdata = validation)
performanceCor <- table(predictionsCor, validation$classe)
errorsCor <- performanceCor
diag(errorsCor) <- NA
OOSerrorCor <- sum(sum(errorsCor, na.rm = TRUE)) / nrow(validation)
print(paste("Time elapsed:", timeCor))
print(performanceCor)
print(paste("Out of sample error estimate:", OOSerrorCor))
table(validation$classe)
keepCols <- selectWeka(train = training[, -1], evaluator="CfsSubsetEval",
search = "BestFirst") + 1
startCFS <- Sys.time()
set.seed(6)
modFitCFS <- train(classe ~ ., trControl = trainSettings,
method = "rf", data = training[, -c(1, removeCols)])
endCFS <- Sys.time()
timeCFS <- endCFS - startCFS
modFitCFS$finalModel
predictionsCFS <- predict(modFitCFS$finalModel, newdata = validation)
performanceCFS <- table(predictionsCFS, validation$classe)
errorsCFS <- performanceCFS
diag(errorsCFS) <- NA
OOSerrorCFS <- sum(sum(errorsCFS, na.rm = TRUE)) / nrow(validation)
print(paste("Time elapsed:", timeCFS))
print(performanceCFS)
print(paste("Out of sample error estimate:", OOSerrorCFS))
names(training)
startCFS <- Sys.time()
set.seed(6)
modFitCFS <- train(classe ~ ., trControl = trainSettings,
method = "rf", data = training[, c(keepCols, 54)])
endCFS <- Sys.time()
timeCFS <- endCFS - startCFS
modFitCFS$finalModel
predictionsCFS <- predict(modFitCFS$finalModel, newdata = validation)
performanceCFS <- table(predictionsCFS, validation$classe)
errorsCFS <- performanceCFS
diag(errorsCFS) <- NA
OOSerrorCFS <- sum(sum(errorsCFS, na.rm = TRUE)) / nrow(validation)
print(paste("Time elapsed:", timeCFS))
print(performanceCFS)
print(paste("Out of sample error estimate:", OOSerrorCFS))
with(dataReduce, levels(user_name))
names(testAssign) <- with(dataReduce, levels(user_name))
rm(list = ls())
source("getData.R")
data <- getData("training")
head(data)
dataReduce <- data[, c(2, 8:11, 37:49, 60:68, 84:86, 102, 113:124, 140, 151:160)]
trainSettings <- trainControl(method="repeatedcv", number=10, repeats=3)
set.seed(13)
trainAssign <- rnorm(6)
trainIndex <- trainAssign[trainAssign < 0]
names(trainAssign) <- with(dataReduce, levels(user_name))
dataReduce$user_name <- revalue(dataReduce$user_name, replace = trainAssign)
training <- dataReduce[dataReduce$user_name %in% trainIndex,]
dataReduce <- dataReduce[!(dataReduce$user_name %in% trainIndex),]
set.seed(13)
testAssign <- rnorm(3)
testIndex <- testAssign[trainAssign < 0]
dataReduce$user_name <- with(dataReduce, factor(user_name))
with(dataReduce, levels(user_name))
set.seed(16)
trainAssign <- rnorm(6)
trainIndex <- trainAssign[trainAssign < 0]
names(trainAssign) <- with(dataReduce, levels(user_name))
dataReduce$user_name <- revalue(dataReduce$user_name, replace = trainAssign)
training <- dataReduce[dataReduce$user_name %in% trainIndex,]
dataReduce <- dataReduce[!(dataReduce$user_name %in% trainIndex),]
set.seed(16)
testAssign <- rnorm(3)
testIndex <- testAssign[trainAssign < 0]
dataReduce$user_name <- with(dataReduce, factor(user_name))
names(testAssign) <- with(dataReduce, levels(user_name))
dataReduce$user_name <- revalue(dataReduce$user_name, replace = testAssign)
testing <- dataReduce[dataReduce$user_name %in% testIndex,]
validation <- dataReduce[!(dataReduce$user_name %in% testIndex),]
dataReduce <- data[, c(2, 8:11, 37:49, 60:68, 84:86, 102, 113:124, 140, 151:160)]
set.seed(16)
trainAssign <- rnorm(6)
trainIndex <- trainAssign[trainAssign < 0]
names(trainAssign) <- with(dataReduce, levels(user_name))
dataReduce$user_name <- revalue(dataReduce$user_name, replace = trainAssign)
training <- dataReduce[dataReduce$user_name %in% trainIndex,]
dataReduce <- dataReduce[!(dataReduce$user_name %in% trainIndex),]
set.seed(16)
testAssign <- rnorm(3)
testIndex <- testAssign[trainAssign < 0]
dataReduce$user_name <- with(dataReduce, factor(user_name))
names(testAssign) <- with(dataReduce, levels(user_name))
dataReduce$user_name <- revalue(dataReduce$user_name, replace = testAssign)
testing <- dataReduce[dataReduce$user_name %in% testIndex,]
validation <- dataReduce[!(dataReduce$user_name %in% testIndex),]
keepCols <- selectWeka(train = training[, -1], evaluator="CfsSubsetEval",
search = "BestFirst") + 1
startCFS <- Sys.time()
set.seed(6)
modFitCFS <- train(classe ~ ., trControl = trainSettings,
method = "rf", data = training[, c(keepCols, 54)])
endCFS <- Sys.time()
timeCFS <- endCFS - startCFS
modFitCFS$finalModel
predictionsCFS <- predict(modFitCFS$finalModel, newdata = validation)
performanceCFS <- table(predictionsCFS, validation$classe)
errorsCFS <- performanceCFS
diag(errorsCFS) <- NA
OOSerrorCFS <- sum(sum(errorsCFS, na.rm = TRUE)) / nrow(validation)
print(paste("Time elapsed:", timeCFS))
print(performanceCFS)
print(paste("Out of sample error estimate:", OOSerrorCFS))
set.seed(6)
modFitCFS <-
modFitCFS$finalModel
predictionsCFS <- predict(modFitCFS$finalModel, newdata = validation)
saveRDS(modFitCFS, file="modFitCFS.rds")
table(predictionsCFS, validation$classe)
dataReduce <- data[, c(2, 8:11, 37:49, 60:68, 84:86, 102, 113:124, 140, 151:160)]
trainSettings <- trainControl(method="repeatedcv", number=10, repeats=3)
set.seed(5738)
trainAssign <- rnorm(6)
trainIndex <- order(trainAssign)[1:4]
trainIndex <- trainAssign[order(trainAssign)][1:4]
trainAssign[order(trainAssign)]
trainAssign[order(trainAssign)][1
]
trainAssign[order(trainAssign)][2]
trainIndex <- trainAssign[order(trainAssign)][c(1:4)]
table(training$user_name)
set.seed(5738)
trainAssign <- rnorm(6)
trainIndex <- trainAssign[order(trainAssign)][c(1:4)]
names(trainAssign) <- with(dataReduce, levels(user_name))
dataReduce$user_name <- revalue(dataReduce$user_name, replace = trainAssign)
training <- dataReduce[dataReduce$user_name %in% trainIndex,]
dataReduce <- dataReduce[!(dataReduce$user_name %in% trainIndex),]
set.seed(3754)
testAssign <- rnorm(3)
testIndex <- testAssign[order(testAssign)][1]
dataReduce$user_name <- with(dataReduce, factor(user_name))
names(testAssign) <- with(dataReduce, levels(user_name))
dataReduce$user_name <- revalue(dataReduce$user_name, replace = testAssign)
testing <- dataReduce[dataReduce$user_name %in% testIndex,]
validation <- dataReduce[!(dataReduce$user_name %in% testIndex),]
table(training$user_name)
table(validation$user_name)
table(testing$user_name)
keepCols <- selectWeka(train = training[, -1], evaluator="CfsSubsetEval",
search = "BestFirst") + 1
keepCols <- selectWeka(train = training[, -1], evaluator="CfsSubsetEval",
search = "BestFirst") + 1
